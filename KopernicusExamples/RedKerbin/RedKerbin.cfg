@Kopernicus:AFTER[KOPERNICUS] 
{
    @Body[Kerbin]
    {
        // Goes under body, remove the '@' if you're creating a scaled space where there previously wasn't one (i.e. new planet)
        @ScaledVersion
        {
            // Existing planets don't define a Material specialization, so use '@' when you're overriding your own or someone else's planet config
            Material
            {
                // Sets the atmosphere gradient, if one already exists, you need to put !Gradient on the line before Gradient because
                // gradient fields obviously don't support merging.
                //
                // Gradient is a list of points along a line where you define colors.  A Texture is then computed from the gradient and 
                // substituted for the rimColorRamp texture.
                Gradient
                {
                    0.0 = 0.643,0.220,0.094,1
                    0.6 = 0.0549,0.0784,0.141,1
                    1.0 = 0.0196,0.0196,0.0196,1
                }

                // If you have a texture for the gradient, you can specify to use the texture instead of a manual gradient
                //rimColorRamp = KopernicusExamples/RedKerbin/Gradient

                // I think these have to do with how large the horizon appears
                rimPower = 2.06 
                rimBlend = 0.3
            }
        }

        // Goes under body, remove the '@' if you're creating an atmosphere where there previously wasn't one (i.e. new planet)
        @Atmosphere
        {
            // effectively the ambient lighting color for all objects on the ground of this body (provides a slight tint)
            ambientColor = 0.306,0.187,0.235,1   

            // sets the waveLength property in the AtmosphereFromGround component of the scaled version
            // From my picking around in the KSP assemblies, it seems this is fed to the shader in this way:
            //
            // shader.invWaveLength = Color( 1 / r^4, 1 / g^4, 1 / b^4, 0.5);
            //
            // Obviously the code for the shader is not available, and I don't feel like picking through ARB shader IL so we'll need
            // to figure this out experiementally.
            lightColor = 0.509,0.588,0.643,0
			
			AtmosphereFromGround
			{
				outerRadiusMult = 1.032
				innerRadiusMult = 0.958
			}
        }
    }
}
